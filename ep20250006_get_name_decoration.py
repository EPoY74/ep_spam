"""
–ó–∞–¥–∞–Ω–∏–µ –æ—Ç chatgpt:
–í–æ—Ç —Ç–µ–±–µ –∑–∞–¥–∞—á–∞ ‚Ññ1:

üîß –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1: –û–±–µ—Ä–Ω–∏ —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏—Ä—É—é—â–∏–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
–°–æ–∑–¥–∞–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä log_calls, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç:

–≤—ã–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏

—Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –æ–Ω–∞ –≤—ã–∑–≤–∞–Ω–∞

—Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

–ü—Ä–∏–º–µ—Ä:

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
@log_calls
def add(x, y):
    return x + y

add(2, 3)
–û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥:

csharp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
–í—ã–∑–æ–≤ add —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: (2, 3), {}
–†–µ–∑—É–ª—å—Ç–∞—Ç: 5
"""

from functools import wraps
import time


def log_call(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏,
    –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –µ–π –ø–∞—Ä–µ–º–µ—Ç—Ä–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    –¢–∞–∫ –∂–µ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é :.4f
    """

    @wraps(func)
    def wrapper(*args, **kwargs):
        print(func.__name__)
        print(f"–í—ã–∑–æ–≤ {func.__name__}. –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–∏–º–µ–Ω—Ç—ã: {args}, {kwargs}")
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        execution_time = end_time - start_time
        print(
            f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.4f} —Å–µ–∫—É–Ω–¥",
        )
        return result

    return wrapper


@log_call
def add(a: int, b: int) -> int:
    """
    –°–ª–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    a(int) - –ü–µ—Ä–≤–æ–µ —Å–ª–∞–≥–∞–µ–º–æ–µ
    b(int) - –í—Ç–æ—Ä–æ–µ —Å–ª–∞–≥–∞–µ–º–æ–µ

    –†–µ–∑—É–ª—å—Ç–∞—Ç: int
    """
    time.sleep(0.5)
    return a + b


# print(add(2, 2))
add(2, 2)
